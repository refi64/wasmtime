searchState.loadedDescShard("wasmtime_types", 0, "Internal dependency of Wasmtime and Cranelift that defines …\nThe common supertype of all internal references.\nIndex of a <code>call_indirect</code> instruction in a module, used for …\nA constant expression.\nThe subset of Wasm opcodes that are constant.\nIndex type of a passive data segment inside the …\nIndex type of a defined function inside the WebAssembly …\nIndex type of a defined global inside the WebAssembly …\nIndex type of a defined memory inside the WebAssembly …\nIndex type of a defined table inside the WebAssembly …\nIndex type of a passive element segment inside the …\nAn index within an engine, canonicalized among all modules …\nIndex type of a canonicalized recursive type group inside …\nAn interned type index, either at the module or engine …\nAn index of an entity.\nA type of an item in a wasm module where an item is …\nContains the error value\nThe common supertype of all external references.\nF32 type\nF64 type\nThe common supertype of all function references.\nIndex type of a function (imported or defined) inside the …\nFunction index.\nA function type where the index points to the type section …\nA WebAssembly global.\nGlobal index.\nA global variable with the specified content type\nIndex type of a global variable (imported or defined) …\nThe storage type is i16.\nI32 type\nI64 type\nThe storage type is i8.\nAn implementation limit was exceeded.\nThe input WebAssembly code is invalid.\nWebAssembly linear memory.\nMemory index.\nA linear memory with the specified limits\nIndex type of a linear memory (imported or defined) inside …\nAn index within the current Wasm module, canonicalized …\nIndex type of a canonicalized recursive type group inside …\nA canonicalized type index for a type within a single …\nContains the success value\nIndex type of a defined memory inside the WebAssembly …\nAn index within the containing type’s rec group. This is …\nA canonicalized type index referencing a type within a …\nReference type\nIndex into the global list of modules found within an …\nWebAssembly table.\nTable index.\nA table with the specified element type and limits\nIndex type of a table (imported or defined) inside the …\nWebAssembly event.\nAn event definition.\nIndex type of an event inside the WebAssembly module.\nHelpers used to convert a <code>wasmparser</code> type to a type in …\nIndex type of a type (imported or defined) inside the …\nA trait for things that can trace all type-to-type edges, …\nA feature used by the WebAssembly code is not supported by …\nAny user-defined error.\nV128 type\nA canonicalized type index into an engine’s shared type …\nThe storage type is a value type.\nMaximum size, in bytes, of 32-bit memories (4G)\nMaximum size, in bytes, of 64-bit memories.\nWebAssembly page sizes are defined to be 64KiB.\nA concrete array type.\nA function, array, or struct type.\nA WebAssembly translation error.\nThe type of a struct field or array element.\nWebAssembly function type – equivalent of <code>wasmparser</code>’s …\nA top heap type.\nWebAssembly heap type – equivalent of <code>wasmparser</code>’s …\nA recursive type group.\nWebAssembly reference type – equivalent of <code>wasmparser</code>’…\nA convenient alias for a <code>Result</code> that uses <code>WasmError</code> as the …\nRepresents storage types introduced in the GC spec for …\nA concrete struct type.\nA concrete, user-defined (or host-defined) Wasm type.\nWebAssembly value type – equivalent of …\nReturn the raw bit encoding for this instance.\nReturn the raw bit encoding for this instance.\nReturn the raw bit encoding for this instance.\nReturn the raw bit encoding for this instance.\nReturn the raw bit encoding for this instance.\nReturn the raw bit encoding for this instance.\nReturn the raw bit encoding for this instance.\nReturn the raw bit encoding for this instance.\nReturn the raw bit encoding for this instance.\nReturn the raw bit encoding for this instance.\nReturn the raw bit encoding for this instance.\nReturn the raw bit encoding for this instance.\nReturn the raw bit encoding for this instance.\nReturn the raw bit encoding for this instance.\nReturn the raw bit encoding for this instance.\nReturn the raw bit encoding for this instance.\nReturn the raw bit encoding for this instance.\nReturn the raw bit encoding for this instance.\nReturn the raw bit encoding for this instance.\nReturn the raw bit encoding for this instance.\nGet the underlying engine-level type index, if any.\nGet the underlying module-level type index, if any.\nGet the underlying recgroup-level type index, if any.\nReturn the underlying index value as a <code>u32</code>.\nReturn the underlying index value as a <code>u32</code>.\nReturn the underlying index value as a <code>u32</code>.\nReturn the underlying index value as a <code>u32</code>.\nReturn the underlying index value as a <code>u32</code>.\nReturn the underlying index value as a <code>u32</code>.\nReturn the underlying index value as a <code>u32</code>.\nReturn the underlying index value as a <code>u32</code>.\nReturn the underlying index value as a <code>u32</code>.\nReturn the underlying index value as a <code>u32</code>.\nReturn the underlying index value as a <code>u32</code>.\nReturn the underlying index value as a <code>u32</code>.\nReturn the underlying index value as a <code>u32</code>.\nReturn the underlying index value as a <code>u32</code>.\nReturn the underlying index value as a <code>u32</code>.\nReturn the underlying index value as a <code>u32</code>.\nReturn the underlying index value as a <code>u32</code>.\nReturn the underlying index value as a <code>u32</code>.\nReturn the underlying index value as a <code>u32</code>.\nReturn the underlying index value as a <code>u32</code>.\nReturns the underlying bits of the index.\nCanonicalize <code>self</code> by rewriting all type references inside …\nCanonicalize <code>self</code> by rewriting all type references inside …\nThe array, function, or struct that is defined.\nConverts a wasmparser function type to a wasmtime type\nConverts a wasmparser table type into a wasmtime type\nConverts a wasmparser heap type to a wasmtime type\nConverts a wasmparser reference type to a wasmtime type\nConverts a wasmparser table type into a wasmtime type\nConverts a wasmparser value type to a wasmtime type\nThe field’s element type.\nReturns the argument unchanged.\nConvert from a <code>BinaryReaderError</code> to a <code>WasmError</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new instance from the raw bit encoding.\nCreate a new instance from the raw bit encoding.\nCreate a new instance from the raw bit encoding.\nCreate a new instance from the raw bit encoding.\nCreate a new instance from the raw bit encoding.\nCreate a new instance from the raw bit encoding.\nCreate a new instance from the raw bit encoding.\nCreate a new instance from the raw bit encoding.\nCreate a new instance from the raw bit encoding.\nCreate a new instance from the raw bit encoding.\nCreate a new instance from the raw bit encoding.\nCreate a new instance from the raw bit encoding.\nCreate a new instance from the raw bit encoding.\nCreate a new instance from the raw bit encoding.\nCreate a new instance from the raw bit encoding.\nCreate a new instance from the raw bit encoding.\nCreate a new instance from the raw bit encoding.\nCreate a new instance from the raw bit encoding.\nCreate a new instance from the raw bit encoding.\nCreate a new instance from the raw bit encoding.\nCreate a new instance from a <code>u32</code>.\nCreate a new instance from a <code>u32</code>.\nCreate a new instance from a <code>u32</code>.\nCreate a new instance from a <code>u32</code>.\nCreate a new instance from a <code>u32</code>.\nCreate a new instance from a <code>u32</code>.\nCreate a new instance from a <code>u32</code>.\nCreate a new instance from a <code>u32</code>.\nCreate a new instance from a <code>u32</code>.\nCreate a new instance from a <code>u32</code>.\nCreate a new instance from a <code>u32</code>.\nCreate a new instance from a <code>u32</code>.\nCreate a new instance from a <code>u32</code>.\nCreate a new instance from a <code>u32</code>.\nCreate a new instance from a <code>u32</code>.\nCreate a new instance from a <code>u32</code>.\nCreate a new instance from a <code>u32</code>.\nCreate a new instance from a <code>u32</code>.\nCreate a new instance from a <code>u32</code>.\nCreate a new instance from a <code>u32</code>.\nCreate a new const expression from a <code>wasmparser</code> const …\nConvert a <code>wasmparser::Operator</code> to a <code>ConstOp</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs this type canonicalized for hash consing?\nIs this type canonicalized for runtime usage?\nIs this an engine-level type index?\nWhether this type is forbidden from being the supertype of …\nIs this an module-level type index?\nIs this an recgroup-level type index?\nIs this function type compatible with trampoline usage in …\nIs this a type that is represented as a <code>VMGcRef</code>?\nIs this a type that is represented as a <code>VMGcRef</code>?\nIs this a type that is represented as a <code>VMGcRef</code>?\nIs this a type that is represented as a <code>VMGcRef</code> and is …\nIs this a type that is represented as a <code>VMGcRef</code> and is …\nIs this a type that is represented as a <code>VMGcRef</code> and is …\nConverts the specified type index from a heap type into a …\nConverts the specified type index from a heap type into a …\nReturns the maximum size memory is allowed to be only …\nThe maximum number of elements in the table.\nThe maximum number of pages in the memory.\nReturns the maximum size, in bytes, that this memory is …\nWhether or not this is a 64-bit memory\nThe minimum number of elements in the table.\nThe minimum number of pages in the memory.\nReturns the minimum size, in bytes, that this memory must …\nA flag indicating whether the value may change at runtime.\nWhether this field can be mutated or not.\nCreate a new <code>VMSharedTypeIndex</code>.\nCreate a new const expression from the given opcodes.\nHow many <code>externref</code>s are in this function’s params?\nHow many <code>externref</code>s are in this function’s returns?\nGet the opcodes that make up this const expression.\nFunction params types.\nIs this ConstExpr a provably nonzero integer value?\nReturns params types.\nWhether the memory may be shared between multiple threads.\nThis type’s supertype, if any.\nGet this type’s top type.\nVisit each edge.\nTrace all <code>VMSharedTypeIndex</code> edges, ignoring other edges.\nVisit each edge, mutably.\nGet the version of this function type that is suitable for …\nThe event signature type.\nThe types inside of this recgroup.\nGet the underlying engine-level type index, or panic.\nAssert that this entity is a function\nAssert that this entity is a global\nAssert that this entity is a memory\nGet the underlying module-level type index, or panic.\nGet the underlying module-level type index, or panic.\nAssert that this entity is a table\nAssert that this entity is a tag\nThe Wasm type of the value stored in the global.\nThe table elements’ Wasm type.\nReturn an <code>Err(WasmError::Unsupported(msg))</code> where <code>msg</code> the …\nReturn an <code>Err(WasmError::Unsupported(msg))</code> where <code>msg</code> the …\nA string describing the validation error.\nThe bytecode offset where the error occurred.")