searchState.loadedDescShard("cranelift_module", 0, "Top-level lib.rs for <code>cranelift_module</code>.\nMemory allocation failure from a backend\nWraps a generic error from a backend\nInitialize the data with the specified contents.\nWraps a <code>cranelift-codegen</code> error\nWhen it’s a DataId\nInformation about a data object which can be accessed.\nA description of a data object.\nA data object identifier for use in the <code>Module</code> interface.\nIndicates an identifier was defined more than once\nContains the error value\nDefined inside the module, and visible outside it.\nWraps an error from a flag definition.\nWhen it’s a FuncId\nA function identifier for use in the <code>Module</code> interface.\nA declared name may refer to either a function or data …\nInformation about a function which can be called.\nA offset inside a function\nDefined inside the module, visible inside the current …\nDefined outside of a module.\nIndicates an identifier was used as data/function first, …\nIndicates a function identifier was declared with a …\nThis specifies how data is to be initialized.\nIndicates an identifier was defined, but was declared as …\nSymbols known to the linker.\nCall into a library function.\nLinkage refers to where an entity is defined and who can …\nDefined inside the module, but not visible outside it.\nA <code>Module</code> is a utility for collecting functions and data …\nThis provides a view to the state of a module which allows …\nError messages for all <code>Module</code> methods\nA module relocation.\nA translated <code>ExternalName</code> into something global we can …\nA convenient alias for a <code>Result</code> that uses <code>ModuleError</code> as …\nContains the success value\nDefined inside the module, visible outside it, and may be …\nRecord of the arguments cranelift passes to <code>TrapSink::trap</code>.\nIndicates an identifier was used before it was declared\nThis indicates that no initialization has been specified …\nUser defined function, converted from <code>ExternalName::User</code>.\nVersion number of this crate.\nInitialize the data with all zeros.\nThe addend to add to the symbol value.\nAlignment in bytes. <code>None</code> means that the default alignment …\nAn iterator over all relocations of the data object.\nReturn the raw bit encoding for this instance.\nReturn the raw bit encoding for this instance.\nReturn the underlying index value as a <code>u32</code>.\nReturn the underlying index value as a <code>u32</code>.\nClear all data structures in this <code>DataDescription</code>.\nClear the given <code>Context</code> and reset it for use with a new …\nClear the given <code>Context</code> and reset it for use with a new …\nClear the given <code>Signature</code> and reset for use with a new …\nClear the given <code>Signature</code> and reset for use with a new …\nTrap code, as determined by cranelift.\nObject file section\nExternal data object declarations.\nData addresses to write at specified offsets.\nGet all declarations in this module.\nDeclare an anonymous data object in this module.\nDeclare an anonymous data object in this module.\nDeclare an anonymous function in this module.\nDeclare an anonymous function in this module.\nDeclare a data object in this module.\nDeclare a data object in this module.\nTODO: Same as above.\nTODO: Same as above.\nUse this when you’re building the IR of a function to …\nUse this when you’re building the IR of a function to …\nTODO: Same as above.\nTODO: Same as above.\nUse this when you’re building the IR of a function to …\nUse this when you’re building the IR of a function to …\nDeclare a function in this module.\nDeclare a function in this module.\nDefault names for ir::LibCalls. A function by this name is …\nDefine an object initialized with the given contents.\nDefine a data object, producing the data contents from the …\nDefine a function, producing the function body from the …\nDefine a function, producing the function body from the …\nDefine a function, taking the function body from the given …\nDefine a function, producing the function body from the …\nDefine a zero-initialized object with the given size.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new instance from the raw bit encoding.\nCreate a new instance from the raw bit encoding.\nConverts a <code>FinalizedMachReloc</code> produced from a <code>Function</code> …\nGet the <code>FuncId</code> for the function named by <code>name</code>.\nGet the <code>DataId</code> for the data object named by <code>name</code>.\nCreate a new instance from a <code>u32</code>.\nCreate a new instance from a <code>u32</code>.\nExternal function declarations.\nFunction addresses to write at specified offsets.\nGet the <code>DataDeclaration</code> for the data object named by <code>name</code>.\nGet an iterator of all data declarations\nGet the <code>FunctionDeclaration</code> for the function named by <code>name</code>.\nGet an iterator of all function declarations\nGet the module identifier for a given name, if that name …\nGet the module identifier for a given name, if that name …\nGet the module identifier for a given name, if that name …\nDeclare an external function import.\nDeclares a global value import.\nHow the data should be initialized.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTest whether this linkage can have a definition.\nTest whether this linkage will have a definition that …\nReturn whether <code>name</code> names a function, rather than a data …\nReturn the <code>TargetIsa</code> to compile for.\nThe kind of relocation.\nThe linkage name of the function.\nThe linkage name of the data object.\nCreate a new <code>Context</code> initialized for use with this <code>Module</code>.\nCreate a new <code>Context</code> initialized for use with this <code>Module</code>.\nCreate a new empty <code>Signature</code> with the default calling …\nCreate a new empty <code>Signature</code> with the default calling …\nThe external symbol / name to which this relocation refers.\nAllocate a new <code>DataDescription</code>.\nThe offset at which the relocation applies, <em>relative to the</em>\nOffset into function.\nSet the alignment for data. The alignment must be a power …\nOverride the segment/section for data, only supported on …\nReturn the size of the data to be initialized.\nSource location given to cranelift.\nReturn the target information needed by frontends to …\nReturn the target information needed by frontends to …\nCreates a user-defined external name.\nWrite the address of <code>data</code> into the data at offset <code>offset</code>.\nWrite the address of <code>func</code> into the data at offset <code>offset</code>.\nThe contents, which also implies the size of the data.\nThe size of the data.\nIo error the allocation failed with\nTell where the allocation came from\nArbitrary.\nArbitrary.")