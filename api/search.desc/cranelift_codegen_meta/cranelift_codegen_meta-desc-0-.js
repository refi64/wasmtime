searchState.loadedDescShard("cranelift_codegen_meta", 0, "This crate generates Rust sources for use by …\nCranelift DSL classes.\nBuild support for precomputed constant hash tables.\nError returned during meta code-generation.\nGenerate instruction data (including opcodes, formats, …\nGenerate the ISA-specific settings.\nGenerate sources with type info.\nGenerates all the source files used in Cranelift from the …\nGenerates all the ISLE source files used in Cranelift from …\nGenerates all the Rust source files used in Cranelift from …\nDefine supported ISAs; includes ISA-specific instructions, …\nGenerate an ISA from an architecture string (e.g. “x86_64…\nA macro that converts boolean settings into predicates to …\nA macro that joins boolean settings into a list (e.g. …\nShared definitions for the Cranelift intermediate language.\nSource code generator.\nAn index-accessed table implementation that avoids …\nConvert the string <code>s</code> to CamelCase.\nCranelift ValueType hierarchy\nAn immediate field in an instruction format.\nA tuple serving as a key to deduplicate InstructionFormat.\nEvery instruction opcode has a corresponding instruction …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nTuples of (Rust field name / Rust type) for each immediate …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nImmediate operand kind.\nMember name in InstructionData variant.\nInstruction format name in CamelCase. This is used as a …\nReturns a tuple that uniquely identifies the structure.\nIndex of the value input operand that is used to infer the …\nMark this instruction as a branch instruction. This also …\nMark this instruction as a call instruction.\nMark this instruction as one that can load from memory.\nCan this instruction read from memory?\nMark this instruction as one that can store to memory.\nCan this instruction write to memory?\nMark this instruction as possibly trapping.\nCan this instruction cause a trap?\nDocumentation string.\nInstruction format.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nIndices in operands_in of input operands that are …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTrue for all branch or jump instructions.\nIs this a call instruction?\nVerify that the use of TypeVars is consistent with …\nIs this a return instruction?\nTrue for instructions that terminate the block.\nInstruction mnemonic, also becomes opcode name.\nInput operands. This can be a mix of SSA value operands …\nOutput operands. The output operands must be SSA values or …\nMark this instruction as one that has side-effects.\nDoes this instruction have other side effects besides can_*…\nOne of the input or output operands is a free type …\nMark this instruction as a return instruction. This also …\nMark this instruction as one whose side-effects may be …\nDespite having other side effects, is this instruction …\nMark this instruction as a block terminator.\nIndices in operands_in of input operands that are values.\nIndices in operands_out of output operands that are values.\nChecks that the input operands actually match the given …\nCheck if this instruction is polymorphic, and verify its …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAn instruction operand can be an <em>immediate</em>, an <em>SSA value</em>, …\nReturn the EnumValues for this field if it is an <code>enum</code>.\nType-specific fields for this OperandKind.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the operand has an immediate kind.\nReturns true if the operand has an immediate kind or is an …\nType of the operand.\nName of the operand variable, as it appears in function …\nName of this OperandKind in the format’s member field.\nString representation of the Rust type mapping to this …\nThis is the information provided during building for a …\nThis is the basic information needed to track the specific …\nCompute the layout of the byte vector used to represent …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA concrete dynamic SIMD vector type.\nA concrete scalar type that can appear as a vector lane …\nAn iterator for different lane types.\nReference type is scalar type, but not lane type.\nAn iterator for different reference types.\nA concrete SSA value type.\nA concrete SIMD vector type.\nIterate through all of the lane types.\nReturn a string containing the documentation comment for …\nReturn a string containing the documentation comment for …\nReturn a string containing the documentation comment for …\nReturn a string containing the documentation comment for …\nReturn a string containing the documentation comment for …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn the number of bits in a lane.\nReturn the number of bits in a lane.\nReturn the number of bits in a lane.\nReturn the number of bits in a lane.\nReturn the number of bits in a lane.\nReturn the number of lanes.\nReturn the number of lanes.\nReturn the lane type.\nReturn the lane type.\nFind the number of bytes that this type occupies in memory.\nReturn the number of lanes.\nCreate a new lane type iterator.\nCreate a new reference type iterator.\nInitialize a new integer type with <code>n</code> bits.\nInitialize a new type with <code>base</code> lane type and a minimum …\nFind the unique number associated with this type.\nFind the unique number associated with this lane type.\nFind the unique number associated with this vector type.\nFind the unique number associated with this vector type.\nFind the unique number associated with this reference type.\nReturn the name of this type for generated Rust source …\nReturn the total number of bits of an instance of this …\nA set of types.\nType variables can be used in place of concrete types when …\nReturn a TypeSet describing the image of self across …\nGet a fresh copy of self, named after <code>name</code>. Can only be …\nCreate a type variable that is a function of another.\nDocumentation string.\nReturn a TypeSet describing the image of self across …\nReturn a TypeSet describing the image of self across …\nThe upper bound of the range (exclusive).\nGet the free type variable controlling this one.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns this typevar’s type set, assuming this type var …\nReturn the singleton type represented by self. Can only …\nReturns the typeset for this TV. If the TV is derived, …\nReturn a TypeSet describing the image of self across …\nReturn a TypeSet describing the image of self across …\nReturn the image of self across the derived function func.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn a TypeSet describing the image of self across …\nShort name of type variable used in instruction …\nMake a new TypeVar that includes all types narrower than …\nGenerates a set with all the powers of two included in the …\nIf the associated typeset has a single type return it. …\nReturn the number of concrete types represented by this …\nThe lower bound of the range (inclusive).\nType set associated to the type variable. This field must …\nMake a new TypeVar that includes all types wider than self.\nCompute an open addressed, quadratically probed hash table …\nAn error that occurred when the cranelift_codegen_meta …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new error object with the given message.\nGenerate a Builder trait with methods for all instructions.\nEmit a method for creating and inserting an instruction …\nGenerate an instruction format enumeration.\nEmit a method for generating the instruction <code>inst</code>.\nGenerate the InstructionData enum.\nGenerate the boring parts of the InstructionData …\nEmit member initializers for an instruction format.\nGenerate value type constraints for all instructions.\nGenerate the table of ValueTypeSets described by type_sets.\nGet the value type constraint for an SSA value operand, …\nWhich ISLE target are we generating code for?\nGenerating code for instruction selection and lowering.\nGenerating code for CLIF to CLIF optimizations.\nReturns the argument unchanged.\nGenerate an <code>enum</code> immediate in ISLE.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nEmits the constructor of the Flags structure.\nEmits DESCRIPTORS, ENUMERATORS, HASH_TABLE and PRESETS.\nGenerates a <code>all()</code> function with all options for this enum\nEmit real enum for the Enum settings.\nEmit a getter function for <code>setting</code>.\nEmits getters for each setting value.\nGenerates the <code>iter</code> function.\nEmit Display and FromStr implementations for enum settings.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nEmit definition for all dynamic vector types with <code>bits</code> …\nEmit a constant definition of a single value type.\nEmit types using the given formatter object.\nEmit definition for all vector types with <code>bits</code> total size.\nGenerate the types file.\nRepresents known ISA target.\nReturns all supported isa targets.\nReturns the argument unchanged.\nCreates isa target from arch.\nCreates isa target using name.\nCalls <code>U::from(self)</code>.\nA list of compilations (transformations from ISLE source to\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstruct the list of compilations (transformations from …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThis module predefines all the Cranelift scalar types.\nVerifies certain properties of formats.\nA reference to a basic block in the same function, with …\nA reference to a basic block in the same function, with …\nA reference to a basic block in the same function, with …\nA reference to a dynamic_stack slot declared in the …\nReturns the argument unchanged.\nA reference to an external function declared in the …\nA reference to a global value.\nCalls <code>U::from(self)</code>.\nA reference to a jump table declared in the function …\nSmall helper to initialize an OperandBuilder with the …\nA reference to a function signature declared in the …\nA reference to a stack slot declared in the function …\nA variable-sized list of value operands. Use for Block and …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA code indicating the arithmetic operation to perform in …\nA condition code for comparing floating point values.\nReturns the argument unchanged.\nA 32-bit immediate floating point operand.\nA 64-bit immediate floating point operand.\nA 64-bit immediate integer operand.\nA condition code for comparing integer values.\nCalls <code>U::from(self)</code>.\nFlags for memory operations like <code>load</code> and <code>store</code>.\nA 32-bit immediate signed offset.\nA constant stored in the constant pool.\nA trap code indicating the reason for trapping.\nAn unsigned 128-bit immediate integer operand.\nAn unsigned 8-bit immediate integer operand.\nIterator through the variants of the Float enum.\n128-bit int.\n16-bit int.\n32-bit int.\n64-bit int.\n8-bit int.\nThis provides an iterator through all of the supported int …\n32-bit reference.\n64-bit reference.\nThis provides an iterator through all of the supported …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMatch formatting class.\nCompute the indentation of s, or None of an empty line.\nAdd a match expression.\nAdd an arm that reads fields to the Match statement.\nAdds an arm that doesn’t read anythings from the fields …\nThe clause for the placeholder pattern _.\nAdd a comment line.\nAdd a (multi-line) documentation comment.\nPushes an empty line.\nA macro that simplifies the usage of the Formatter by …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the current whitespace indentation in the form of a …\nDecrease indentation by one level.\nIncrease current indentation level by one.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAdd an indented line.\nAdd one or more lines after stripping common indentation.\nSource code formatter class. Used to collect source code …\nCreate a new match statement on <code>expr</code>.\nGiven a multi-line string, split it into a sequence of …\nWrite <code>self.lines</code> to a file.\nA table of sequences which tries to avoid common …\nCollect items into the <code>table</code> list, removing duplicates.\nTry to find the subsequence <code>sub</code> in the <code>whole</code> sequence. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")