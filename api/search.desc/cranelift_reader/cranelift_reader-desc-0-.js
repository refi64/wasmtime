searchState.loadedDescShard("cranelift_reader", 0, "Cranelift file reader library.\nA comment in a parsed function.\nA CLIF comparison operation; e.g. <code>==</code>.\nAdditional details about a function parsed from a text …\nContains the error value\nA cranelift feature in a test file preamble.\nSingle identifier flag: <code>foo</code>.\nA generic ParseError.\nRepresent a function call; RunCommands invoke a CLIF …\nThe ISA specifications in a <code>.clif</code> file.\nThe location of a <code>Token</code> or <code>Error</code>.\nThe parsed file does not contain any <code>isa</code> commands, but it …\nContains the success value\nLike <code>FlagsOrIsa</code>, but holds ownership.\nA parse error is returned when the parse failed.\nAn error type returned by <code>parse_options</code>.\nOptions for configuring the parsing of filetests.\nResult of a parser operation. The <code>ParseError</code> variant …\nInvoke a function and print its result.\nInvoke a function and compare its result to a value …\nA run command appearing in a test file.\nThe parsed file does contain <code>isa</code> commands. Each <code>isa</code> …\nMapping from entity names to source locations.\nA command appearing in a test file.\nA parsed test case.\nAn option on a test command.\nAn unknown flag was used, with the given name at the given …\nAn unknown value was used, with the given name at the …\nA value assigned to an identifier: <code>foo=bar</code>.\n<code>feature &quot;...&quot;</code> lines\n<code>feature ! &quot;...&quot;</code> lines.\nThe arguments to be passed to the function when invoked.\nProduce a FlagsOrIsa reference.\nThe command name as a string.\n<code>test foo ...</code> lines.\nAnnotation comments that appeared inside or after the …\nLook up a block entity.\nLook up a constant entity.\nLook up a dynamic stack slot entity.\nLook up a function entity.\nLook up a global value entity.\nLook up a jump table entity.\nLook up a signature entity.\nLook up a stack slot entity.\nLook up a value entity.\nDefine the block <code>entity</code>.\nDefine the jump table <code>entity</code>.\nDefine the dynamic stack slot <code>entity</code>.\nDefine the dynamic type <code>entity</code>.\nDefine an entity. This can be used for instructions whose …\nDefine the external function <code>entity</code>.\nDefine the global value <code>entity</code>.\nDefine the jump table <code>entity</code>.\nDefine the memory type <code>entity</code>.\nDefine the signature <code>entity</code>.\nDefine the stack slot <code>entity</code>.\nDefine the value <code>entity</code>.\nDefault calling convention used when none is specified for …\nThe entity this comment is attached to. Comments always …\n<code>feature ...</code> lines\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe name of the function to call. Note: this field is for …\nParsed functions and additional details about each …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether it’s a warning or a plain error.\n<code>isa bar ...</code> lines.\nLine number. Command-line arguments are line 0 and source …\nGet the source location where an entity was defined.\nLocation of the error.\nLocation of the <code>function</code> keyword that begins this function.\nLook up an entity by source name. Returns the entity …\nDefault for machine_code_cfg_info setting (enabled or …\nMapping of entity numbers to source locations.\nError message.\nCreate a new empty <code>SourceMap</code>.\nCreate a new TestCommand by parsing <code>s</code>. The returned …\nCreate a new TestOption by parsing <code>s</code>. The returned option …\nThe options following the command name.\nParse the entire <code>text</code> into a list of functions.\nParse an single command line options and apply it to <code>config</code>…\nParse an iterator of command line options and apply them …\nParse a CLIF comment <code>text</code> as a run command.\nParse “set” and “triple” commands.\nParse the entire <code>text</code> as a test case file.\nCompiler passes to run on the parsed functions.\nComments appearing before the first function. These are …\nRun the RunCommand:\nTarget ISA for compiling the parsed functions, e.g. “…\nText of the comment, including the leading <code>;</code>.\nIf the <code>IsaSpec</code> contains exactly 1 <code>TargetIsa</code> we return a …\nDefault for unwind-info setting (enabled or disabled).\nLocation where the flag was given.\nLocation where the flag was given.\nName of the unknown flag.\nName of the unknown value.\nValue of the unknown value.")