searchState.loadedDescShard("wasmtime_wasi_nn", 0, "A machine learning backend.\nA backend-defined execution context.\nA backend-defined graph (i.e., ML model).\nA container for graphs.\nCapture the state necessary for calling into the backend …\nDefine the Rust interface a backend must implement in …\nEarly-return from a test if the test environment is not …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLoad a graph from the files contained in the <code>path</code> …\nMake a new context from the default state.\nConstruct an in-memory registry from the available …\nThis is testing-specific code–it is public only so that …\nImplements the <code>wasi-nn</code> API for the WIT (“preview2”) …\nImplements the <code>wasi-nn</code> API for the WITX (“preview1”) …\nErrors returned by a backend; BackendError::BackendAccess …\nA BackendExecutionContext performs the actual inference; …\nSome Backends support loading a Graph from a directory on …\nA BackendGraph can create BackendExecutionContexts; this …\nA Backend contains the necessary state to load Graphs.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturn a list of all available backend frameworks.\nImplements a <code>wasi-nn</code> <code>BackendInner</code> using OpenVINO.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturn the directory in which the test artifacts are …\nReturn <code>Ok</code> if all checks pass.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInstantiates the provided <code>module</code> using the specified …\nInstantiates a pre-instantiated module using the specified …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLow-level creation wrapper for wrapping up the exports of …\nDefine where the graph should be executed.\nAn execution graph for performing inference (i.e., a …\nDescribes the encoding of the graph. This allows the API …\nBind a <code>graph</code> to the input and output tensors for an …\nThe type of the elements in a tensor.\nContains the tensor data.\nDescribe the size of the tensor (e.g., 2x2x2x2 -&gt; [2, 2, …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDescribe the type of element in the tensor (e.g., <code>f32</code>).\nAdds all instance items to the specified <code>Linker</code>.")