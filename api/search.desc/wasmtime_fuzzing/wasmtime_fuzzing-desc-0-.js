searchState.loadedDescShard("wasmtime_fuzzing", 0, "Fuzzing infrastructure for Wasmtime.\nTest case generators.\nOne time start up initialization for fuzzing:\nCustom fuzz input mutators.\nOracles.\nSupport for maintaining the usefulness of a corpus over …\nHelper macro for fuzz targets that are single-module …\nConfiguration for async support within a store.\nChoose between matching the host architecture or a …\nCompiler to use.\nConfiguration for <code>wasmtime::Config</code> and generated modules …\nCranelift compiler.\nConfiguration to force use of a linear memory that’s …\nA value passed to and from evaluation. Note that reference …\nEnumerate the supported value types.\nNo async support enabled.\nConfiguration for <code>wasmtime::InstanceAllocationStrategy</code>.\nConfiguration for linear memories in Wasmtime.\nDefault module-level configuration for fuzzing Wasmtime.\nUse the host’s feature set.\nConfiguration for linear memories which correspond to …\nRepresents a normal memory configuration for Wasmtime with …\nUse the on-demand instance allocation strategy.\nUse the pooling instance allocation strategy.\nConfiguration for <code>wasmtime::PoolingAllocationStrategy</code>.\nConfigure a single instruction module.\nGenerate a Wasm module that keeps track of its current …\nGenerate a modified flag set for the current host.\nA custom “linear memory allocator” for wasm which only …\nA mechanism to generate <code>UnalignedMemory</code> at runtime.\nConfiguration related to <code>wasmtime::Config</code> and the various …\nA wast test from this repository.\nWinch compiler.\nAsync support is enabled and cooperative yielding is done …\nAsync support is enabled and cooperative yielding is done …\nGenerating sequences of Wasmtime API calls.\nGenerate a <code>DiffValue</code> of the given <code>ty</code> type.\nConfiguration for whether wasm is invoked in an async …\nCompiles the <code>wasm</code> within the <code>engine</code> provided.\nConfiguration for the compiler to use.\nThis module generates test cases for the Wasmtime …\nApplies this async configuration to the <code>wasmtime::Config</code> …\nConfigure Wasmtime with these codegen settings.\nConfigures a store based on this configuration.\nThe <code>*.wast</code> contents of the spec test\nWinch doesn’t support the same set of wasm proposal as …\nUpdates this configuration to forcibly enable async …\nThe filename of the spec test\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nUses this configuration and the supplied source of data to …\nUses this configuration and the supplied source of data to …\nGenerates an arbitrary method of timing out an instance, …\nGet the input values to run the Wasm module with.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTests whether this configuration is capable of running all …\nForce <code>self</code> to be a configuration compatible with <code>other</code>. …\nThe Wasmtime memory configuration to use.\nConfiguration related to generated modules.\nChoose a single-instruction module that matches <code>config</code>.\nIndicates that this configuration is being used for …\nConfiguration for the instance allocation strategy to use.\nGenerating series of <code>table.get</code> and <code>table.set</code> operations.\nEncode a binary Wasm module with a single exported …\nConvenience function for generating a <code>Store&lt;T&gt;</code> using this …\nConverts this to a <code>wasmtime::Config</code> object\nConvert this generated strategy a Wasmtime strategy.\nConvert the generated limits to Wasmtime limits.\nGet this test case’s Wasm module.\nConfiguration related to the <code>wasmtime::Config</code>.\nDuration between epoch ticks.\nNumber of ticks between yields.\nA list of CPU features to enable, e.g., …\nThe target triple of the host.\nA call to one of Wasmtime’s public APIs.\nA sequence of API calls.\nThe API calls.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGenerate an arbitrary instance of the specified type.\nGenerate zero or more sets of arbitrary argument and …\nA description of a Wasm module that makes a series of …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSerialize this module into a Wasm binary.\nUse <code>wasm-mutate</code> to mutate a fuzz input.\nRepresents supported commands to the <code>instantiate_many</code> …\nResult of comparing the result of two operations during …\nAn epoch-interruption-based timeout is used with a sleeping\nBoth engines failed with the same error message, and …\nFuel-based timeouts are used where the specified fuel is …\nInstantiates a module.\nNo timeout is used, it should be guaranteed via some other …\nThe result has reached the state where engines may have …\nThe <code>T</code> in <code>Store&lt;T&gt;</code> for fuzzing stores, used to limit …\nBoth engines succeeded.\nTerminates a “running” instance.\nMethods of timing out execution of a WebAssembly module\nInstantiates a wasm module and runs its exports with dummy …\nRun the given <code>Stacks</code> test case and assert that the host’…\nEvaluate an exported Wasm function using the WebAssembly …\nEvaluate an exported Wasm function using the wasmi …\nEvaluate an exported Wasm function using Wasmtime.\nEvaluate the function identified by <code>name</code> in two different …\nDummy implementations of things that a Wasm module can …\nGenerate and execute a …\nDefine the interface for differential evaluation of Wasm …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInstantiate the Wasm buffer, and implicitly fail if we …\nInstantiates many instances from the given modules.\nCreate a Wasmtime <code>Instance</code> from a <code>Module</code> and fill in all …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLogs a wasm file to the filesystem to make it easy to …\nInvoke the given API calls.\nComputes the differential result from executing in two …\nCreates the default set of limits for all fuzzing stores.\nExecute a series of <code>table.get</code> and <code>table.set</code> operations.\nExecutes the wast <code>test</code> with the <code>config</code> specified.\nA wrapper for <code>wasm-spec-interpreter</code> as a <code>DiffEngine</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSet up the OCaml runtime for triggering its signal handler …\nA wrapper for <code>wasmi</code> as a <code>DiffEngine</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA wrapper for using Wasmtime as a <code>DiffEngine</code>.\nA wrapper around a Wasmtime instance.\nRetrieve the names and types of all exported functions in …\nReturns the list of globals and their types exported from …\nReturns the list of exported memories and whether or not it…\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether or not this instance has hit its OOM …\nMerely store the configuration; the engine is actually …\nInstantiate a new Wasmtime instance.\nConstruct a dummy <code>Extern</code> from its type signature\nConstruct a dummy function for the given function type\nConstruct a dummy global for the given global type.\nCreate a set of dummy functions/globals/etc for the given …\nConstruct a dummy memory for the given memory type.\nConstruct a dummy table for the given table type.\nConstruct a dummy value for the given value type.\nConstruct a sequence of dummy values for the given types.\nProvide a way to instantiate Wasm modules.\nProvide a way to evaluate Wasm functions–a Wasm instance …\nTests that the wasmtime-originating <code>trap</code> matches the error …\nReturns a function which can be used to build the engine …\nBuild a list of allowed values from the given <code>defaults</code> …\nEvaluate an exported function with the given values.\nAttempts to return the value of the specified global, …\nSame as <code>get_global</code> but for memory.\nCreate a new instance with the given engine.\nReturns whether the error specified from this engine might …\nReturn the name of the engine.\nReturn the name of the engine behind this instance.\nRetrieve a comma-delimited list of values from an …\nInitialize any global state associated with runtimes that …\nUsed as part of <code>execute</code> above to determine whether a …\nThis module is not known to be valid and it may not compile\nThis module is known to be valid so it should assert …\nExecutes a “single module fuzzer” given the raw <code>input</code> …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nImplementation of a libfuzzer custom mutator for a …")