searchState.loadedDescShard("cranelift_interpreter", 0, "Cranelift IR interpreter.\nVirtual Addressing Scheme for the Interpreter\nImplements the function environment (e.g. a …\nImplements a call frame (activation record) for the …\nThe InstructionContext trait describes a Cranelift …\nCranelift IR interpreter.\nCranelift instructions modify the state of the machine; …\nThe step function interprets a single Cranelift …\nThe DataValueExt trait is an extension trait for DataValue…\nVirtual Address region\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAn opaque reference to a <code>Function</code> stored in the …\nA function store contains all of the functions that are …\nAdd a function by name.\nReturn the raw bit encoding for this instance.\nReturn the underlying index value as a <code>u32</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new instance from the raw bit encoding.\nCreate a new instance from a <code>u32</code>.\nRetrieve a function by its index in the function store.\nRetrieve a function by its name.\nRetrieve a function from a FuncRef within a Function. TODO …\nRetrieve the index of a function in the function store by …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nHolds the mutable elements of an interpreted function call.\nAccessor for the current entries in the frame.\nReturns the argument unchanged.\nAccessor for the <code>Function</code> of this frame.\nRetrieve the actual value associated with an SSA reference.\nRetrieve multiple SSA references; see <code>get</code>.\nCalls <code>U::from(self)</code>.\nConstruct a new Frame for a function. This allocates a …\nRename all of the SSA references in <code>old_names</code> to those in …\nAssign <code>value</code> to the SSA reference <code>name</code>.\nAssign to multiple SSA references; see <code>set</code>.\nSince InstructionContext is likely used within a Cranelift …\nExposes the necessary information for understanding a …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nWe still have <code>fuel</code> available and should continue execution.\nThe result of consuming fuel. Signals if the caller should …\nThe Cranelift interpreter; this contains some high-level …\nThe ways interpretation can fail.\nMaintains the Interpreter’s state, implementing the State…\nThe available <code>fuel</code> has been exhausted, we should stop now.\nCall a function by its index in the FunctionStore; this is …\nCall a function by name; this is a helpful proxy for …\nNumber of bytes from the bottom of the stack where the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNon-Recursively resolves a global value until its address …\nThe <code>fuel</code> mechanism sets a number of instructions that the …\nRegisters a libcall handler\nThis trait manages the state necessary to interpret a …\nRetrieve a value <code>V</code> from memory at the given <code>address</code>, …\nStore a value <code>V</code> into memory at the given <code>address</code>, checking …\nCollect a list of values <code>V</code> by their value references.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCompute the address of a function given its name.\nRetrieve a reference to the currently executing Function.\nRetrieve a reference to a Function.\nRetrieve a reference to a Function given its address.\nRetrieve the handler callback for a LibCall\nRetrieves the current pinned reg value\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRecord that an interpreter has returned from a called …\nRecord that an interpreter has called into a new Function.\nGiven a global value, compute the final value for that …\nSets a value for the pinned reg\nComputes the stack address for this stack slot, including …\nReturn one or more values from an instruction to be …\nIndicates a call the given Function with the supplied …\nContinue to the next available instruction, e.g.: in <code>nop</code>, …\nJump to another block with the given parameters, e.g.: in …\nEnumerate the ways in which the control flow can change …\nReturn from the current function with the given …\nIndicates a tail call to the given Function with the …\nStop with a program-generated trap; note that these are …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInterpret a single Cranelift instruction. Note that …\nIterator for DataValue’s\nContains the error value\nThrow a ValueError if an exact conversion to Type is not …\nSimilar to Truncate, but extracts from the top of the …\nConverts an integer into either -1 or zero.\nContains the success value\nConvert a floating point number by rounding to the nearest …\nConvert to a larger integer type, extending the sign bit; …\nConverts an integer into a boolean, zero integers are …\nTruncate the value to fit into the specified Type; e.g. in …\nConvert to a larger integer type, extending with zeroes; …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")