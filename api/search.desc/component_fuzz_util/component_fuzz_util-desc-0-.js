searchState.loadedDescShard("component_fuzz_util", 0, "This module generates test cases for the Wasmtime …\nRepresents custom fragments of a WAT file which may be …\nThe name of the exported guest function which the host …\nThe name of the imported host function which the generated …\nWasmtime allows up to 100 type depth so limit this to just …\nRepresents a test case for calling a component function\nRepresents a component model interface type\nWraps a <code>Box&lt;[T]&gt;</code> and provides an <code>Arbitrary</code> implementation …\nGenerate a <code>Declarations</code> for this <code>TestCase</code> which may be …\nString encoding to use for host -&gt; component\nString encoding to use from host-to-component.\nString encoding to use for component -&gt; host\nString encoding to use from component-to-host.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nA WAT fragment representing the core function import and …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGenerate a complete WAT file based on the specified …\nParameter declarations used for the imported and exported …\nThe types of parameters to pass to the function\nResult declaration used for the imported and exported …\nThe result types of the function\nGenerate a <code>TokenStream</code> containing the rust type name for a …\nTypes to thread through when instantiating sub-components.\nType declarations (if any) referenced by <code>params</code> and/or …")