searchState.loadedDescShard("wasmtime_wasi_http", 0, "Wasmtime’s WASI HTTP Implementation\nContains the error value\nA <code>wasi:http</code>-specific error type used to represent either a …\nA <code>Result</code> type where the error type defaults to <code>HttpError</code>.\nContains the success value\nCapture the state necessary for use in the wasi-http API …\nA trait which provides internal WASI HTTP state.\nRaw bindings to the <code>wasi:http</code> package.\nImplementation of the <code>wasi:http/types</code> interface’s …\nReturns a mutable reference to the WASI HTTP context.\nDowncast this error to an <code>ErrorCode</code>.\nDowncast this error to a reference to an <code>ErrorCode</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nTranslate a <code>http::Error</code> to a wasi-http <code>ErrorCode</code> in the …\nTranslate a <code>hyper::Error</code> to a wasi-http <code>ErrorCode</code> in the …\nTranslate a <code>hyper::Error</code> to a wasi-http <code>ErrorCode</code> in the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nI/O utility for bridging between <code>tokio::io</code> and <code>hyper::rt</code>.\nWhether a given header should be considered forbidden and …\nCreate a new incoming request resource.\nCreate a new outgoing response resource.\nImplementation of the <code>wasi:http/proxy</code> world.\nSend an outgoing request.\nReturns a mutable reference to the WASI HTTP resource …\nCreate a new <code>HttpError</code> that represents a trap.\nImplements the base structure (i.e. WasiHttpCtx) that will …\nA duration of time, in nanoseconds.\nAn instant in time, in nanoseconds. An instant is relative …\nRead the current value of the clock.\nQuery the resolution of the clock. Returns the duration of …\nCreate a <code>pollable</code> which will resolve once the given …\nCreate a <code>pollable</code> which will resolve once the specified …\nThe body of the incoming request.\nThis function is invoked with an incoming HTTP Request, …\nThe sender for sending a response.\nThe response has been consumed.\nThis is a catch-all error for anything that doesn’t fit …\nA pending response\nThe response is ready.\nThe authority of the request.\nHow long to wait between frames of the response body.\nThe request body.\nHow long to wait for a connection to be established.\nHow long to wait for the first byte of the response body.\nThis function is invoked with an outgoing HTTP Request, …\nThe request headers.\nThe method of the request.\nThe path and query of the request.\nThe scheme of the request.\nDefines the case payload type for <code>DNS-error</code> above:\nThese cases are inspired by the IANA HTTP Proxy Error …\nField keys are always strings.\nDefines the case payload type for …\nField values should always be ASCII strings. However, in …\nThis following block defines the <code>fields</code> resource which …\nThis error indicates that a forbidden <code>field-key</code> was used …\nRepresents a future which may eventaully return an …\nRepresents a future which may eventaully return trailers, …\nThis type enumerates the different kinds of errors that …\nHeaders is an alias for Fields.\nThis error indicates that the operation on the <code>fields</code> was …\nRepresents an incoming HTTP Request or Response’s Body.\nRepresents an incoming HTTP Request.\nRepresents an incoming HTTP Response.\nThis is a catch-all error for anything that doesn’t fit …\nThis error indicates that a <code>field-key</code> or <code>field-value</code> was …\nThis type corresponds to HTTP standard Methods.\nRepresents an outgoing HTTP Request or Response’s Body.\nRepresents an outgoing HTTP Request.\nRepresents an outgoing HTTP Response.\nAn owned version of the fields.\nAn owned version of the fields.\nA reference to the fields of a parent entry.\nA reference to the fields of a parent entry.\nParameters for making an HTTP Request. Each of these …\nRepresents the ability to send an HTTP Response.\nThis type corresponds to HTTP standard Related Schemes.\nThis type corresponds to the HTTP standard Status Code.\nDefines the case payload type for <code>TLS-alert-received</code> above:\nTrailers is an alias for Fields.\nAppend a value for a key. Does not change or delete any …\nReturns the authority from the request, if it was present.\nGet the HTTP Authority for the Request. A value of <code>none</code> …\nThe timeout for receiving subsequent chunks of bytes in …\nReturns the resource corresponding to the outgoing Body …\nReturns the resource corresponding to the outgoing Body …\nMake a deep copy of the Fields. Equivelant in behavior to …\nThe timeout for the initial connect to the HTTP Server.\nGives the <code>incoming-body</code> associated with this request. Will …\nReturns the incoming body. May be called at most once. …\nDelete all values for a key. Does nothing if no values for …\nRetrieve the full set of keys and values in the Fields. …\nTakes ownership of <code>incoming-body</code>, and returns a …\nFinalize an outgoing body, optionally providing trailers. …\nThe timeout for receiving the first byte of the Response …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstruct an HTTP Fields.\nGet all of the values corresponding to a key. If the key …\nReturns the contents of the trailers, or an error which …\nReturns the incoming HTTP Response, or an error, once one …\nReturns <code>true</code> when the key is present in this <code>fields</code>. If …\nGet the <code>headers</code> associated with the request.\nGet the headers associated with the Request.\nReturns the headers from the incoming response.\nGet the headers associated with the Request.\nAttempts to extract a http-related <code>error</code> from the wasi:io …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the method of the incoming request.\nGet the Method for the Request.\nConstruct an empty HTTP Fields.\nConstruct a new <code>outgoing-request</code> with a default <code>method</code> of …\nConstruct a default <code>request-options</code> value.\nConstruct an <code>outgoing-response</code>, with a default <code>status-code</code> …\nReturns the path with query parameters from the request, …\nGet the combination of the HTTP Path and Query for the …\nReturns the protocol scheme from the request.\nGet the HTTP Related Scheme for the Request. When <code>none</code>, the\nSet all of the values for a key. Clears any existing …\nSet the value of the <code>response-outparam</code> to either send a …\nSet the HTTP Authority for the Request. A value of <code>none</code> …\nSet the timeout for receiving subsequent chunks of bytes …\nSet the timeout for the initial connect to the HTTP …\nSet the timeout for receiving the first byte of the …\nSet the Method for the Request. Fails if the string …\nSet the combination of the HTTP Path and Query for the …\nSet the HTTP Related Scheme for the Request. When <code>none</code>, the\nSet the HTTP Status Code for the Response. Fails if the …\nReturns the status code from the incoming response.\nGet the HTTP Status Code for the Response.\nReturns the contents of the body, as a stream of bytes.\nReturns a pollable which becomes ready when either the …\nReturns a pollable which becomes ready when either the …\nReturns a stream for writing the body contents.\nThe fields themselves.\nThe function to get the fields from the parent.\nThe parent resource rep.\nThe fields themselves.\nThe function to get the fields from the parent.\nThe parent resource rep.\nTrailers have been consumed by <code>future-trailers.get</code>.\nTrailers are ready and here they are.\nThe concrete type behind a <code>wasi:http/types/future-trailers</code> …\nThe concrete type behind a <code>was:http/types/incoming-body</code> …\nThe concrete type behind the <code>wasi:io/streams/input-stream</code> …\nThe concrete type behind a <code>wasi:http/types/outgoing-body</code> …\nCommon type for incoming bodies.\nCommon type for outgoing bodies.\nThe body is a request body.\nThe body is a response body.\nWhether the body is a request or response body.\nTrailers aren’t here yet.\nAbort the body.\nConstruct the correct <code>types::ErrorCode</code> body size error.\nFinish the body, optionally with trailers.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert this body into a <code>HostFutureTrailers</code> resource.\nCreate a new <code>HostIncomingBody</code> with the given <code>body</code> and a …\nCreate a new <code>HostOutgoingBody</code>\nRetain a worker task that needs to be kept alive while …\nTake the output stream, if it’s available.\nTry taking the stream of this body, if it’s available.\nA type that wraps any type implementing …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new <code>TokioIo</code> wrapping the given inner type.\nBindings to the <code>wasi:http/proxy</code> world.\nAdd all of the <code>wasi:http/proxy</code> world’s interfaces to a …\nRaw bindings to the <code>wasi:http/proxy</code> exports.\nReturns the argument unchanged.\nInstantiates the provided <code>module</code> using the specified …\nInstantiates a pre-instantiated module using the specified …\nCalls <code>U::from(self)</code>.\nLow-level creation wrapper for wrapping up the exports of …\nSync implementation of the <code>wasi:http/proxy</code> world.\nThe body of the incoming request.\nThis function is invoked with an incoming HTTP Request, …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe sender for sending a response.\nBindings to the <code>wasi:http/proxy</code> world.\nAdd all of the <code>wasi:http/proxy</code> world’s interfaces to a …\nRaw bindings to the <code>wasi:http/proxy</code> exports.\nReturns the argument unchanged.\nInstantiates the provided <code>module</code> using the specified …\nInstantiates a pre-instantiated module using the specified …\nCalls <code>U::from(self)</code>.\nLow-level creation wrapper for wrapping up the exports of …\nThe body of the incoming request.\nThis function is invoked with an incoming HTTP Request, …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe sender for sending a response.\nThe response has been consumed.\nAn owned version of <code>HostFields</code>\nA handle to a future incoming response.\nThe concrete type behind a <code>wasi:http/types/fields</code> resource.\nThe concrete type behind a …\nThe concrete type behind a <code>wasi:http/types/incoming-request</code>…\nThe concrete type behind a …\nThe concrete type behind a <code>wasi:http/types/outgoing-request</code>…\nThe concrete type behind a …\nThe concrete type behind a <code>wasi:http/types/request-options</code> …\nThe concrete type behind a …\nA response that is in the process of being received.\nConfiguration for an outgoing request.\nAn owned version of the fields.\nA pending response\nThe response is ready.\nA reference to the fields of a parent entry.\nCapture the state necessary for use in the wasi-http API …\nA trait which provides internal WASI HTTP state.\nThe authority of the request.\nThe timeout between chunks of a streaming body\nThe timeout between chunks of the response.\nHow long to wait between frames of the response body.\nThe body of the incoming request.\nThe body of the response.\nThe request body.\nThe response body\nThe timeout for connecting.\nHow long to wait for a connection to be established.\nReturns a mutable reference to the WASI HTTP context.\nThe default implementation of how an outgoing request is …\nThe underlying implementation of how an outgoing request …\nThe timeout until the first byte.\nHow long to wait for the first byte of the response body.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe headers of the response.\nThe request headers.\nThe response headers\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether a given header should be considered forbidden and …\nReturns <code>true</code> if the response is ready.\nThe method of the request.\nCreate a new context.\nCreate a new <code>HostIncomingRequest</code>.\nCreate a new incoming request resource.\nCreate a new outgoing response resource.\nThe path and query of the request.\nCreate a new <code>HostFutureIncomingResponse</code> that is pending on …\nCreate a new <code>HostFutureIncomingResponse</code> that is ready.\nThe response itself.\nThe sender for sending a response.\nThe scheme of the request.\nSend an outgoing request.\nThe status of the response.\nThe response status\nReturns a mutable reference to the WASI HTTP resource …\nUnwrap the response, panicking if it is not ready.\nWhether to use TLS for the request.\nOptional worker task that continues to process the …\nThe fields themselves.\nThe function to get the fields from the parent.\nThe parent resource rep.")